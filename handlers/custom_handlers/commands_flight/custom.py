import re
import time
import datetime
from loguru import logger
from keyboards.inline.keyboard_all_command import name_all_commands
from keyboards.reply.keyboard3days_data import three_days_data
from loader import bot
from telebot.types import Message
from database.common.models import db, Airplanes
from database.core import crud
from handlers.custom_handlers.commands_flight.custom_lader import site_api, headers, params, generate_url
from states.states2custom import UserStates
from utils.misc.cheking2history import check_date

db_write = crud.record_data

logger.add("logs/logs_custom.log", level="ERROR", format="{time} {level} {message}", rotation="500 MB", compression="zip")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback /custom –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
@logger.catch
@bot.callback_query_handler(func=lambda call: call.data == "/custom")
def callback_custom(call) -> None:
	"""
	–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–∞, –ø–æ –Ω–æ–º–µ—Ä—É —Ä–µ–π—Å–∞ –∏ –¥–∞—Ç–µ
	–ò –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ UserState.get_flight_number

    Parameters:
        call: –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ callback –∑–∞–ø—Ä–æ—Å–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        None
	"""

	logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å callback custom".format(user=call.from_user.first_name))
	# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	bot.set_state(call.from_user.id, UserStates.get_flight_number, call.message.chat.id)
	logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∏–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ get_flight_number".format(user=call.from_user.first_name))
	good_mess = "–ü—Ä–∏–≤–µ—Ç {user}! üëã \n" \
	            "–í —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –∏–ª–∏ –±—É–¥—É—â–µ–≥–æ —Ä–µ–π—Å–∞ –ø–æ –µ–≥–æ " \
	            "–Ω–æ–º–µ—Ä—É —Ä–µ–π—Å–∞ –∏ –¥–∞—Ç–µ.‚úàÔ∏èüìÖ\n" \
	            "\n–í–≤–µ–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä –∏—Å–∫–æ–º–æ–≥–æ —Ä–µ–π—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>KL1395</b> –∏–ª–∏ <b>Klm 1395</b>".format(user=call.from_user.first_name)
	bot.send_message(call.message.chat.id, good_mess, parse_mode="HTML")
	logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º".format(user=call.from_user.first_name,))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /custom
@logger.catch
@bot.message_handler(commands=["custom"])
def command_custom(message: Message) -> None:
	"""
	–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–π—Å–∞, –ø–æ –Ω–æ–º–µ—Ä—É —Ä–µ–π—Å–∞ –∏ –¥–∞—Ç–µ
	–ò –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ UserState.get_flight_number

    Parameters:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        None
	"""

	logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–º–∞–Ω–¥–æ–π custom".format(user=message.from_user.first_name))
	# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	bot.set_state(message.from_user.id, UserStates.get_flight_number, message.chat.id)
	logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∏–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ get_flight_number".format(user=message.from_user.first_name))
	good_mess = "–ü—Ä–∏–≤–µ—Ç {user}! üëã \n" \
	            "–í —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –∏–ª–∏ –±—É–¥—É—â–µ–≥–æ —Ä–µ–π—Å–∞ –ø–æ –µ–≥–æ " \
	            "–Ω–æ–º–µ—Ä—É —Ä–µ–π—Å–∞ –∏ –¥–∞—Ç–µ.‚úàÔ∏èüìÖ\n" \
	            "\n–í–≤–µ–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä –∏—Å–∫–æ–º–æ–≥–æ —Ä–µ–π—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>KL1395</b> –∏–ª–∏ <b>Klm 1395</b>".format(user=message.from_user.first_name)
	bot.send_message(message.chat.id, good_mess, parse_mode="HTML")
	logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º".format(user=message.from_user.first_name,))


@logger.catch
@bot.message_handler(state=UserStates.get_flight_number)
def get_flight_number(message: Message) -> None:
	"""
	–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	–ò –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ UserState.get_data

    Parameters:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        None
	"""

	# –ó–∞–¥–∞—ë–º –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞
	flight_number_pattern = r"[A-Za-z]{1,3}\s?\d+"

	# –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ
	if re.search(flight_number_pattern, message.text):
		search_flight_number = re.search(flight_number_pattern, message.text)
		logger.debug("–í —Å—Ç—Ä–æ–∫–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ {flight_number}".format(flight_number=search_flight_number))
		logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ {flight_number}".format(user=message.from_user.first_name,
		                                                                           flight_number=message.text))
		# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		bot.set_state(message.from_user.id, UserStates.get_data2custom, message.chat.id)
		logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∏–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ get_data".format(user=message.from_user.first_name))

		# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É —Ä–µ–π—Å–∞
		good_mess = "–í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–µ–π—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>{data}</b>".format(data=datetime.datetime.now().strftime("%Y-%m-%d"))

		# –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
		keyboard_data = three_days_data()
		bot.send_message(message.chat.id, good_mess, reply_markup=keyboard_data, parse_mode="HTML")

		# –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
		try:
			with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
				data["flight_number"] = message.text
				logger.info("–î–∞–Ω–Ω—ã–µ –æ –Ω–æ–º–µ—Ä–µ —Ä–µ–π—Å–∞ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")

		except Exception as e:
			logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:")
			logger.exception(e)

	# –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ
	else:
		bad_mess = "–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.\n" \
		           "–ü—Ä–∏–º–µ—Ä <b>KL1395</b> –∏–ª–∏ <b>Klm 1395</b>"
		bot.send_message(message.chat.id, bad_mess, parse_mode="HTML")
		logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞".format(user=message.from_user.first_name))


@logger.catch
@bot.message_handler(state=UserStates.get_data2custom)
def get_data(message: Message) -> None:
	"""
	–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–µ–π—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	–ò —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Parameters:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        None
	"""

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –¥–∞—Ç—ã –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
	if check_date(message.text):
		logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –≤–≤–µ–ª –¥–∞—Ç—É —Ä–µ–π—Å–∞ {date}".format(user=message.from_user.first_name,
		                                                                date=message.text))

		# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
		try:
			with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
				flight_number = data["flight_number"]

				# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				good_mess = "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ."
				bot.send_message(message.chat.id, good_mess, parse_mode="HTML")

				logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è".format(
					user=message.from_user.first_name, ))

				# –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
				time.sleep(1)

				# –§–æ—Ä–º–∏—Ä—É–µ–º url –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
				url = generate_url(flight_number=flight_number, data_search=message.text)
				logger.debug("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π url –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {url}".format(url=url))

				# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
				try:
					search_flight_status = site_api.flight_status(method="GET", url=url, headers=headers,
					                                              params=params, )
					response_json = search_flight_status.json()
					logger.debug("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: {response}".format(response=response_json, ))

					# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
					response_dict = response_json[0]
					logger.debug("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å: {data}".format(data=response_dict))

					# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç API
					try:
						photo_url = response_dict.get("aircraft", {}).get("image", {}).get("url", "–ù–µ—Ç —Ñ–æ—Ç–æ")
						logger.debug("–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å–∞–º–æ–ª–µ—Ç–∞: {photo_url}".format(photo_url=photo_url))
						airline = response_dict.get("airline", {}).get("name", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏: {airline}".format(airline=airline))
						flight_number = response_dict.get("number", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞: {flight_number}".format(flight_number=flight_number))
						aircraft_reg_number = response_dict.get("aircraft", {}).get("reg", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å–∞–º–æ–ª–µ—Ç–∞: {aircraft_reg_number}".format(aircraft_reg_number=aircraft_reg_number))
						aircraft_model = response_dict.get("aircraft", {}).get("model", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω–∞ –º–æ–¥–µ–ª—å —Å–∞–º–æ–ª–µ—Ç–∞: {aircraft_model}".format(aircraft_model=aircraft_model))
						scheduled_time_departure = response_dict.get("departure", {}).get("scheduledTimeLocal", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞: {scheduled_time_departure}".format(scheduled_time_departure=scheduled_time_departure))
						fact_time_departure = response_dict.get("departure", {}).get("runwayTimeLocal", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞: {actual_time_departure}".format(actual_time_departure=fact_time_departure))
						revised_time_departure = response_dict.get("departure", {}).get("revisedTime", {}).get("local", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞: {revised_time_departure}".format(revised_time_departure=revised_time_departure))
						departure_airport_code = response_dict.get("departure", {}).get("airport", {}).get("iata", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤—ã–ª–µ—Ç–∞: {departure_airport_code}".format(departure_airport_code=departure_airport_code))
						departure_airport_full_name = response_dict.get("departure", {}).get("airport", {}).get("name", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤—ã–ª–µ—Ç–∞: {departure_airport_full_name}".format(departure_airport_full_name=departure_airport_full_name))
						departure_terminal = response_dict.get("departure", {}).get("terminal", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª –≤—ã–ª–µ—Ç–∞: {departure_terminal}".format(departure_terminal=departure_terminal))
						check_in_desk = response_dict.get("departure", {}).get("checkInDesk", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {check_in_desk}".format(check_in_desk=check_in_desk))
						departure_gate = response_dict.get("departure", {}).get("gate", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ø–æ—Å–∞–¥–∫—É: {departure_gate}".format(departure_gate=departure_gate))
						scheduled_time_arrival = response_dict.get("arrival", {}).get("scheduledTimeLocal", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–ª–µ—Ç–∞: {scheduled_time_arrival}".format(scheduled_time_arrival=scheduled_time_arrival))
						fact_time_arrival = response_dict.get("arrival", {}).get("runwayTimeLocal", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–ª–µ—Ç–∞: {fact_time_arrival}".format(fact_time_arrival=fact_time_arrival))
						arrival_airport_code = response_dict.get("arrival", {}).get("airport", {}).get("iata", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –ø—Ä–∏–ª–µ—Ç–∞: {arrival_airport_code}".format(arrival_airport_code=arrival_airport_code))
						arrival_airport_full_name = response_dict.get("arrival", {}).get("airport", {}).get("name", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –ø—Ä–∏–ª–µ—Ç–∞: {arrival_airport_name}".format(arrival_airport_name=arrival_airport_full_name))
						arrival_terminal = response_dict.get("arrival", {}).get("terminal", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª –ø—Ä–∏–ª–µ—Ç–∞: {arrival_terminal}".format(arrival_terminal=arrival_terminal))
						flight_status = response_dict.get("status", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å —Ä–µ–π—Å–∞: {flight_status}".format(flight_status=flight_status))
						last_update = response_dict.get("lastUpdatedUtc", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
						logger.debug("–ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {last_update}".format(last_update=last_update))

						# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
						result_mess_for_user = "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: <b>{airline}</b>\n" \
											   "–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞: <b>{flight_number}</b>\n" \
						                       "–ë–æ—Ä—Ç–æ–≤–æ–π –Ω–æ–º–µ—Ä —Å–∞–º–æ–ª–µ—Ç–∞: <b>{aircraft}</b>\n" \
						                       "–¢–∏–ø —Å–∞–º–æ–ª–µ—Ç–∞: <b>{aircraft_type}</b>\n" \
												"\n<b>–í—Å–µ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞</b>\n" \
											"<u>–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ +/- –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UTC</u>\n" \
											"\n–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞: <b>{scheduled_departure}</b>\n" \
											"–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞: <b>{revised_departure}</b>\n" \
											"–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞: <b>{fact_departure}</b>\n" \
											"–ö–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤—ã–ª–µ—Ç–∞: <b>{departure_airport_code}</b>\n" \
											"–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤—ã–ª–µ—Ç–∞: <b>{departure_airport_name}</b>\n" \
											"–¢–µ—Ä–º–∏–Ω–∞–ª –≤—ã–ª–µ—Ç–∞: <b>{departure_terminal}</b>\n" \
											"–°—Ç–æ–π–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–ª–µ—Ç–∞: <b>{check_in_desk}</b>\n" \
											"–ì–µ–π—Ç –≤—ã–ª–µ—Ç–∞: <b>{departure_gate}</b>\n\n" \
											"\n –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: <b>{scheduled_arrival}</b>\n" \
											"–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: <b>{fact_arrival}</b>\n" \
											"–ö–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è: <b>{arrival_airport_code}</b>\n" \
											"–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è: <b>{arrival_airport_name}</b>\n" \
											"–¢–µ—Ä–º–∏–Ω–∞–ª –ø—Ä–∏–±—ã—Ç–∏—è: <b>{arrival_terminal}</b>\n\n" \
											"\n–°—Ç–∞—Ç—É—Å —Ä–µ–π—Å–∞: <b>{status}</b>\n" \
											"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <b>{last_update}</b>\n".format(
							airline=airline,
							flight_number=flight_number,
							aircraft=aircraft_reg_number,
							aircraft_type=aircraft_model,
							scheduled_departure=scheduled_time_departure,
							fact_departure=fact_time_departure,
							revised_departure=revised_time_departure,
							departure_airport_code=departure_airport_code,
							departure_airport_name=departure_airport_full_name,
							departure_terminal=departure_terminal,
							check_in_desk=check_in_desk,
							departure_gate=departure_gate,
							scheduled_arrival=scheduled_time_arrival,
							fact_arrival=fact_time_arrival,
							arrival_airport_code=arrival_airport_code,
							arrival_airport_name=arrival_airport_full_name,
							arrival_terminal=arrival_terminal,
							status=flight_status,
							last_update=last_update,
						)

						# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
						bot.send_photo(message.chat.id, photo=photo_url)
						bot.send_message(message.chat.id, result_mess_for_user, parse_mode="HTML")

						# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
						logger.debug("–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –ë–î")
						try:
							information2db = []

							# –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
							data2db = {
									"command_name": "/custom",
									"user_id": message.from_user.id,
									"user_name": message.from_user.username,
									"airline_name": airline,
									"flight_number": flight_number,
									"aircraft_reg_number": aircraft_reg_number,
									"iata_departure": departure_airport_code,
									"terminal_departure": departure_terminal,
									"gate_departure": departure_gate,
									"revised_time_departure": revised_time_departure,
									"fact_time_departure": fact_time_departure,
									"iata_arrival": arrival_airport_code,
									"terminal_arrival": arrival_terminal,
									"flight_status": flight_status,
									"last_update_time": last_update,
							}

							logger.debug("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {data2db}".format(data2db=data2db))

							# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫
							information2db.append(data2db)
							logger.debug("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {information2db}".format(information2db=information2db))

							# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
							db_write(db, Airplanes, information2db)
							logger.info("–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ë–î")

						except Exception as e:
							logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î:")
							logger.exception(e)

					except Exception as e:
						logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API:")
						logger.exception(e)
						# –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
						bot.send_message(message.chat.id, "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –¥–ª—è –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

				except AttributeError as e:
					logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:")
					logger.exception(e)
					# –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
					bot.send_message(message.chat.id, "–£–ø—Å... —É –Ω–∞—Å —á—Ç–æ-—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.\n"
					                                  "–ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

		except Exception as e:
			logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:")
			logger.exception(e)

		# –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
		main_keyboard = name_all_commands()
		bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=main_keyboard)
		logger.debug("–°–æ–∑–¥–∞–ª–∞—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

		# –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		bot.delete_state(message.from_user.id, message.chat.id)
		logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ")
		logger.warning("–ö–æ–Ω–µ—Ü —Å—Ü–µ–Ω–∞—Ä–∏—è /custom")


	# –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤–µ—Ä–Ω–æ
	else:
		bad_mess = "–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.\n" \
		           "–ü—Ä–∏–º–µ—Ä <b>{data}</b>".format(data=datetime.datetime.now().strftime("%Y-%m-%d"))
		bot.send_message(message.chat.id, bad_mess, parse_mode="HTML")
		logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—É—é –¥–∞—Ç—É".format(user=message.from_user.first_name))
